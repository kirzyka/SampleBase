<?xml version="1.0" encoding="utf-8"?>
<BasePopupView 
	xmlns="framework.view.components.popups.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:roomingList="framework.view.pages.reservationCreate.subview.roomingList.*"
	xmlns:control="h2olib.control.*"
	xmlns:dataGrid="h2olib.control.itemRenderer.dataGrid.*"
	
	width="1200" height="600"
	
	creationComplete="onCreationComplete()"
	
	title="Rooming List"
	 >
	
<mx:Script>
	<![CDATA[
		import framework.view.pages.reservationEdit.popups.CancelOrderView;
		import h2olib.control.enum.MessageShowType;
		import h2olib.control.enum.MessageKind;
		import services.events.MsgEvent;
		import mx.controls.DateField;
		import h2olib.utils.DateUtils;
		import services.events.reservation.SplitRoomInReservationEvent;
		import services.vo.common.SalutationVO;
		import services.vo.GlobalStorage;
		import mx.collections.HierarchicalData;
		import services.vo.hotels.HotelRoomTypeObjectVO;
		import services.vo.reservation.ReservationRoomBlockedVO;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import h2olib.control.Confirmation;
		import framework.view.pages.reservationCreate.subview.ConfirmationView;
		import services.vo.reservation.RsvRoomPersonVO;
		import services.vo.reservation.OrderDateVO;
		import framework.view.pages.reservationCreate.data.RoomingListItem;
		import services.vo.profiles.ProfilePersonalVO;
		import services.vo.reservation.OrderVO;
		import framework.managers.PopUpManagerExt;
		import framework.view.pages.reservationCreate.popups.WishesList;
		import mx.collections.ArrayCollection;
		import services.vo.GlobalImageAssets;
		import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;

		[Bindable]
		public var userAddIcon:Class = GlobalImageAssets.getInstance().userAddIcon;
		[Bindable]
		public var deleteIcon:Class = GlobalImageAssets.getInstance().removeIcon;
		
		private var lastSelectedItem:RoomingListItem;
		
		private const NEW_ORDER:String = "New Order";
		private const EDIT_ORDER:String = "Edit Order";
			
		private function onCreationComplete():void
		{
			model.reservationModule.aRoomTypesForCurrentGroupReservation = new ArrayCollection();			
			for each(var item:ReservationRoomBlockedVO in model.reservationModule.currentGroupReservation.aRoomBlocked)
			{
				if(!isExistsInRoomTypeArray(item.iRoomType))
				{
					var roomType:HotelRoomTypeObjectVO = new HotelRoomTypeObjectVO() ;
					roomType.iRoomTypeId = item.iRoomType;
					roomType.sLocale = item.sRoomTypeName;
					roomType.iRoomCapacity = item.iRoomCapacity;
					model.reservationModule.aRoomTypesForCurrentGroupReservation.addItem(roomType);
				}
			}				
			
			refreshRoomnigList();
		}
		
		private function isExistsInRoomTypeArray(iRoomTypeId:int):Boolean
		{
			var result:Boolean;
			for each(var item:HotelRoomTypeObjectVO in model.reservationModule.aRoomTypesForCurrentGroupReservation)
			{
				if(item.iRoomTypeId == iRoomTypeId)
				{
					result = true;
					break;
				}					
			}
			return result;
		}	
		// -----------------------------------------------------
		//						BUTTONS
		// -----------------------------------------------------
		private function onMergeAdditionalTransactions():void
		{
			
		}
	
		private function onCopy():void
		{		
			var item:RoomingListItem = dgRoomingList.selectedItem as RoomingListItem;
						
        	var pop:CopyRoomingListDataPopupView = PopUpManagerExt.createPopUp(model.owner, CopyRoomingListDataPopupView, true) as CopyRoomingListDataPopupView;
        	pop.orderId = item.iOrderId;
        	pop.profile = item.oProfile;
        	pop.callBack = refreshRoomnigList;
        	PopUpManagerExt.centerPopUp(pop);
		}	
		
		private function onSplitRooms():void
		{
			var splitRoomInReservationEvent:SplitRoomInReservationEvent = new SplitRoomInReservationEvent();
			splitRoomInReservationEvent.oMapGroupReservation = model.reservationModule.currentGroupReservation;
			splitRoomInReservationEvent.callBack = refreshRoomnigList;
			splitRoomInReservationEvent.dispatch();
		}	
				
		private function onApply():void
		{
			/*if(model.reservationModule.currentGroupReservation.iId == 0)
			{
				var e:
			}*/
			completeCall();
		}		

		private function onClose():void
		{
			close();
		}	
		
		
		
		
		
		

		// -----------------------------------------------------
		//						GRID
		// -----------------------------------------------------
		
		//	Converter from model.reservationModule.currentGroupReservation.oMapReservation.aOrders(OrderVO) to aRoomingList
		private function refreshRoomnigList(event:Event = null):void
		{
			var parentRoomingListItem:RoomingListItem;
			var newRoomingListItem:RoomingListItem;
			var idForRoomingListItem:int;
			var firstOrderDate:OrderDateVO;
			var currentOrderId:int;
			
			model.reservationModule.aRoomingList.removeAll();
			
			for each(var orderItem:OrderVO in model.reservationModule.currentGroupReservation.oMapReservation.aOrders)
			{
				if(orderItem.aOrderDateList.length > 0)
				{
					
					firstOrderDate = orderItem.aOrderDateList[0] as OrderDateVO;
					
					for each(var orderProfileItem:ProfilePersonalVO in orderItem.aProfileList)
					{
						idForRoomingListItem++;
						newRoomingListItem = new RoomingListItem();
						newRoomingListItem.iId = idForRoomingListItem;
						newRoomingListItem.iOrderId = orderItem.iOrderId;
						newRoomingListItem.oHotelRoom = firstOrderDate.oHotelRoom;
						newRoomingListItem.oProfile = orderProfileItem;
						newRoomingListItem.sArrivalDate = orderItem.sStartDate;
						newRoomingListItem.sDepartureDate = orderItem.sEndDate;
						newRoomingListItem.iRoomType = orderItem.iRoomTypeId;
						newRoomingListItem.iAdultsTotal = firstOrderDate.iAdults;
						newRoomingListItem.iChildBefore = firstOrderDate.iChildBefore;
						
						newRoomingListItem.iChildMiddle = firstOrderDate.iChildMiddle; 
						newRoomingListItem.iChildAbove = firstOrderDate.iChildAbove;
						
						newRoomingListItem.oCompany.lMainId = model.reservationModule.currentGroupReservation.oMapReservation.oCaller.iCompanyId;
						newRoomingListItem.oCompany.sName = model.reservationModule.currentGroupReservation.oMapReservation.oCaller.sCompanyName;
						//newRoomingListItem.sConfirmNumber = "no info";//model.reservationModule.currentGroupReservation.oMapReservation.
						
						if(currentOrderId != orderItem.iOrderId)
						{
							currentOrderId = orderItem.iOrderId;
							parentRoomingListItem = newRoomingListItem;
							model.reservationModule.aRoomingList.addItem(parentRoomingListItem);					
							
						}
						else
						{
							newRoomingListItem.parentId = parentRoomingListItem.iId;
							if(parentRoomingListItem.children == null)
							{
								parentRoomingListItem.children = new Array();
							}
							parentRoomingListItem.children.push(newRoomingListItem);
						}												
					}
				}	
			}
			
			dgRoomingList.dataProvider = new HierarchicalData(model.reservationModule.aRoomingList);
			
			orderForm.isEditMode = false;
		}
		
		
		/**	ADD	**/

        public function addPerson():void
        {
        	
        	var selectedRoomingListItem:RoomingListItem = dgRoomingList.selectedItem as RoomingListItem;
        	lastSelectedItem = dgRoomingList.selectedItem as RoomingListItem;
        	
        	for each(var orderItem:OrderVO in model.reservationModule.currentGroupReservation.oMapReservation.aOrders)
			{
        		if(orderItem.iOrderId == selectedRoomingListItem.iOrderId)
        		{
        			var idForNewPerson:int = -1;
        			var personItem:ProfilePersonalVO;
        			for each(personItem in orderItem.aProfileList)
        			{
        				if(idForNewPerson > personItem.lMainId)
        				{
        					idForNewPerson = personItem.lMainId;
        				}
        			}
        			//model.reservationModule.aRoomTypesForCurrentGroupReservation HotelRoomTypeObjectVO
        			
        			for each(var roomType:HotelRoomTypeObjectVO in model.reservationModule.aRoomTypesForCurrentGroupReservation)
        			{
        				if(roomType.iRoomTypeId == selectedRoomingListItem.iRoomType)
        				{
        					if(roomType.iRoomCapacity == orderItem.aProfileList.length)
        					{
								new MsgEvent(MessageKind.ERROR,
									"Error",
									"The number of adults more than it is possible!",
									MessageShowType.UNKNOWN).dispatch();
								return;
        					}        					
							break;
        				}
        			}
        			
        			
        			var newPerson:ProfilePersonalVO = new ProfilePersonalVO();
        			idForNewPerson--;
        			newPerson.lMainId = idForNewPerson;
        			newPerson.sName = "";
        			newPerson.sSurname = model.reservationModule.currentGroupReservation.sGroupName;
        			orderItem.aProfileList.push(newPerson);
        			
        			
        			
        			for each(var orderDateItem:OrderDateVO in orderItem.aOrderDateList)
        			{
        				orderDateItem.iAdults++;
        				orderDateItem.aProfileList.push(new RsvRoomPersonVO(0, idForNewPerson));
        			}
        			refreshRoomnigList();
        			break;
        		}
   			}
        	
        	
        }		
        
        /**	EDIT	**/
        private function setItemForEdit():void
        {
        	if(dgRoomingList.selectedItem != null)
        	{
        		orderForm.isEditMode = true;
        		orderForm.isEditPersonMode = false;
        		orderForm.setItemForEdit(dgRoomingList.selectedItem as RoomingListItem);
        		
        		
        	}
        }
        
      
        /** DELETE	**/
        
        public function deleteOrder():void
        {
        	if((dgRoomingList.selectedItem as RoomingListItem).parentId == 0)
        	{
        		//	first row in group
        		Confirmation.getInstance().show("Delete","Are you sure you want to delete this order?",afterConfirmationDeleteOrder, afterNoConfirmationDeleteOrder); 
        		return;		
        	}
        	else
        	{
        		deletePerson();
        	}        	
        }
        
        private function deletePerson():void
        {
    		Confirmation.getInstance().show("Delete","Are you sure you want to delete this person?", afterConfirmationDeletePerson);
    		return;	        	
        }	
        
        private function afterConfirmationDeleteOrder():void
        {	
        	
        	
    		var delOrderId:int = (dgRoomingList.selectedItem as RoomingListItem).iOrderId;
    		if(delOrderId > 0)
    		{
    			//	Delete from server
    			var popupOrderCncl:CancelOrderView = PopUpManagerExt.createPopUp(model.owner, CancelOrderView, true) as CancelOrderView;
				popupOrderCncl.iOrderId = delOrderId;
				popupOrderCncl.callBack = deleteOrderFromOrderList;
				PopUpManagerExt.centerPopUp(popupOrderCncl);
    		}
    		else
    		{
    			//	delete from client
				deleteOrderFromOrderList();	
	    	}       	
        }
        
        private function deleteOrderFromOrderList():void
        {
        	var delOrderId:int = (dgRoomingList.selectedItem as RoomingListItem).iOrderId;
    		for(var i:int = 0; i < model.reservationModule.currentGroupReservation.oMapReservation.aOrders.length; i++)
    		{
    			if((model.reservationModule.currentGroupReservation.oMapReservation.aOrders[i] as OrderVO).iOrderId == delOrderId)
    			{
    				var startDate:Date = DateField.stringToDate((dgRoomingList.selectedItem as RoomingListItem).sArrivalDate, DateUtils.DATE_SERVER_FORMAT);
    				var endDate:Date = DateField.stringToDate((dgRoomingList.selectedItem as RoomingListItem).sDepartureDate, DateUtils.DATE_SERVER_FORMAT);
					var dDiff:int = DateUtils.dateDiff(DateUtils.DAY_OF_MONTH, startDate, endDate);
					
					for(var j:int = 0; j < dDiff; j++)
					{
						var sDate:String = DateField.dateToString(DateUtils.dateAdd(DateUtils.DAY_OF_MONTH,j,startDate), DateUtils.DATE_SERVER_FORMAT);
						var isExistForDate:Boolean;
						for each(var room:ReservationRoomBlockedVO in model.reservationModule.currentGroupReservation.aRoomBlocked)
						{						
							if(room.iRoomType == (dgRoomingList.selectedItem as RoomingListItem).iRoomType && room.sDate == sDate)
							{
								room.iRoomAllocateQuantity--;
								break;
							}
						}
		    		}    	   				
    				
    				model.reservationModule.currentGroupReservation.oMapReservation.aOrders.splice(i,1);
    				break;
    			}
    		}

    		orderForm.clearNewOrderForm();
    		refreshRoomnigList(); 
        }
        
        private function afterNoConfirmationDeleteOrder():void
        {
        	if((dgRoomingList.selectedItem as RoomingListItem).children != null)
        	{
        		if((dgRoomingList.selectedItem as RoomingListItem).children.length > 0)
        		{
        			deletePerson();
        		}
        	}
        }
        
        private function afterConfirmationDeletePerson():void
        {
        	var iOrderId:int = (dgRoomingList.selectedItem as RoomingListItem).iOrderId;
        	var delProfile:ProfilePersonalVO = (dgRoomingList.selectedItem as RoomingListItem).oProfile;
        	
        	for(var i:int = 0; i < model.reservationModule.currentGroupReservation.oMapReservation.aOrders.length; i++)
        	{
        		var order:OrderVO = model.reservationModule.currentGroupReservation.oMapReservation.aOrders[i] as OrderVO;
          		if(order.iOrderId == iOrderId)
        		{
        			for(var j:int = 0; j < order.aProfileList.length; j++)
		        	{
		        		var profile:ProfilePersonalVO = order.aProfileList[j] as ProfilePersonalVO;
		        		if(profile.lMainId == delProfile.lMainId)
		        		{
		        			order.aProfileList.splice(j,1);
		        					        			
		        			for(var k:int = 0; k < order.aOrderDateList.length; k++)
		        			{
		        				var orderDate:OrderDateVO = order.aOrderDateList[k] as OrderDateVO;
		        				for(var l:int = 0; l < orderDate.aProfileList.length; l++)
		        				{
		        					var roomPerson:RsvRoomPersonVO = orderDate.aProfileList[l] as RsvRoomPersonVO;  
		        					if(roomPerson.iProfileId == delProfile.lMainId)
		        					{
		        						orderDate.iAdults--;
		        						orderDate.aProfileList.splice(l, 1);
		        						break;
		        					}		        					
		        				}
		        			}		        			
		        			break;
		        		}
		        	}        			
        			break;        			
        		}
        	}
			refreshRoomnigList();  
        }	
        
        
  		/**	Buttons in Grid	**/
  		
  		public function openPaymentIns():void
        {		
        	
        }
        
        public function openWishlist():void
        {
        	var pop:WishesList = PopUpManagerExt.createPopUp(model.owner, WishesList, true) as WishesList;
        	pop.profile = (dgRoomingList.selectedItem as RoomingListItem).oProfile;
        	PopUpManagerExt.centerPopUp(pop);
        }      
        
		
		/** Label Functions	**/
		
		private function roomLabelFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
		{
			var result:String = "";
			if(item.oHotelRoom != null)
			{
				result = item.oHotelRoom.sRoomName;
			}
			return result;
		}
		
		private function nameLabelFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
		{
			var result:String = "";			
			result = item.oProfile.sSurname;						
			return result;
		}
		
		private function firstNameLabelFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
		{
			var result:String = "";
			result = item.oProfile.sName;	
			return result;
		}
		
		private function salutationLabelFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
		{
			var result:String = "none";
			var aSalutation:ArrayCollection = model.commonModule.salutationByLanguage(item.oProfile.lLanguageId, true);
			
			for each(var salutationItem:SalutationVO in aSalutation)
			{
				if(salutationItem.lId == item.oProfile.lSalutationId)
				{
					return salutationItem.sName;
				}
			}
			return result;
		}		
		
		
		
		private function roomTypeLabelFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
		{
			var result:String = "";
			for each(var hotelRoom:HotelRoomTypeObjectVO in model.reservationModule.aRoomTypesForCurrentGroupReservation)
			{
				if(hotelRoom.iRoomTypeId == item.iRoomType)
				{
					result = hotelRoom.sLocale;
					break;
				}
			}
			return result;
		}		
		
		private function adultsLabelFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
		{
			var result:String = "";
			if(item.parentId == 0)
			{
				result = item.iAdultsTotal.toString();
			}	
			return result;
		}	

		private function smokerLabelFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
		{
			var result:String = "";
			result = GlobalStorage.smokerField.getItemAt(item.oProfile.smokerField).sName;
			return result;
		}	
		
        private function addIconFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
        {
        	if(item.parentId == 0)
        	{
	        	return "userAddIcon";       		
        	}
        	else
        	{
        		return ""; 
        	}
        }
        
        public function addPersonTooltip():String
        {
        	return "";
        }	
		
        private function deleteIconFunction(item:RoomingListItem, column:AdvancedDataGridColumn):String
        { 
      		return "deleteIcon";        	
        }
        
        public function deleteItemTooltip():String
        {
        	return "";
        }
        
        
		
			
	]]>
</mx:Script>	
	
	<mx:AdvancedDataGrid id="dgRoomingList"
		sortExpertMode="true"	
		displayItemsExpanded="true"
		change="{setItemForEdit()}"	
		width="100%" height="100%">
		
		<mx:defaultLeafIcon>
			{GlobalImageAssets.getInstance().userIcon}
		</mx:defaultLeafIcon>
		<mx:folderOpenIcon>
			{GlobalImageAssets.getInstance().groupIcon}
		</mx:folderOpenIcon>
		<mx:folderClosedIcon>
			{GlobalImageAssets.getInstance().groupIcon}
		</mx:folderClosedIcon>
		<mx:groupedColumns>
			<mx:AdvancedDataGridColumn headerText="Room"
				labelFunction="roomLabelFunction"
				width="80"/>
			<mx:AdvancedDataGridColumn headerText="Name"
				labelFunction="nameLabelFunction"
				/>				
			<mx:AdvancedDataGridColumn headerText="First Name"
				labelFunction="firstNameLabelFunction"
				width="150"/>
			<mx:AdvancedDataGridColumn headerText="Salut."
				labelFunction="salutationLabelFunction"
				width="50"/>
			<mx:AdvancedDataGridColumn headerText="Arrival"
				dataField="sStartDateUIFormat"
				width="80"/>
			<mx:AdvancedDataGridColumn headerText="Departure"
				dataField="sEndDateUIFormat"
				width="80"/>
			<mx:AdvancedDataGridColumn headerText="Room Type"
				width="120"
				labelFunction="roomTypeLabelFunction"/>
			<mx:AdvancedDataGridColumn headerText="Adults"
				labelFunction="adultsLabelFunction"
				width="50"/>				
			<mx:AdvancedDataGridColumn minWidth="8" width="22"
				labelFunction="addIconFunction">
				<mx:itemRenderer>
	                <mx:Component>
	                	<!--mx:Label text="1"/-->
	                    <dataGrid:EmbedImageRenderer
	                    	visible="true"
	                        toolTip="{outerDocument.addPersonTooltip()}"
	                        click="{outerDocument.addPerson()}"/>
	                </mx:Component>
	            </mx:itemRenderer>
			</mx:AdvancedDataGridColumn>
			<mx:AdvancedDataGridColumnGroup headerText="Children">
				<mx:AdvancedDataGridColumn headerText="{'&lt; ' + model.hotelsModule.hotelTotalInfo.iChildAge1}"				
					textAlign="center"
					dataField="iChildBefore"
					width="30"/>
				<mx:AdvancedDataGridColumn headerText="{'&lt; ' + model.hotelsModule.hotelTotalInfo.iChildAge2}"				
					textAlign="center"
					dataField="iChildMiddle"
					width="30"/>		
				<mx:AdvancedDataGridColumn headerText="{'&lt; ' + model.hotelsModule.hotelTotalInfo.iChildAge3}"				
					textAlign="center"
					dataField="iChildAbove"
					width="30"/>				
			</mx:AdvancedDataGridColumnGroup>				
			<mx:AdvancedDataGridColumn headerText="Payment Ins."
				width="90">
				<mx:itemRenderer>
					<mx:Component>
						<mx:Button label="click me" click="{outerDocument.openPaymentIns()}" enabled="false"/>
					</mx:Component>
				</mx:itemRenderer>
			</mx:AdvancedDataGridColumn>
			<mx:AdvancedDataGridColumn headerText="S. Wishes"
				width="90">
				<mx:itemRenderer>
					<mx:Component>
						<mx:Button label="click me" click="{outerDocument.openWishlist()}"/>
					</mx:Component>
				</mx:itemRenderer>
			</mx:AdvancedDataGridColumn>
			<mx:AdvancedDataGridColumn headerText="Smoker"
				labelFunction="smokerLabelFunction"
				width="50"/>
			<!--mx:AdvancedDataGridColumn headerText="Conf. Number"
				dataField="sConfirmNumber"/-->
				
            <mx:AdvancedDataGridColumn minWidth="8" width="22"
                labelFunction="deleteIconFunction">
                <mx:itemRenderer>
                    <mx:Component>
                        <dataGrid:EmbedImageRenderer
                        	visible="true"
                            toolTip="{outerDocument.deleteItemTooltip()}"
                            click="{outerDocument.deleteOrder()}"/>
                    </mx:Component>
                </mx:itemRenderer>
            </mx:AdvancedDataGridColumn>				
				
		</mx:groupedColumns>		
	</mx:AdvancedDataGrid>
	
	
	<control:CollapsiblePanel title="{orderForm.isEditMode ? EDIT_ORDER : NEW_ORDER}"
		width="100%">
		<roomingList:OrderFormView id="orderForm"
			newOrderAddedEvent="{refreshRoomnigList(event)}"
			orderSavedEvent="{refreshRoomnigList(event)}"
			width="100%"/>		
	</control:CollapsiblePanel>
		
	
	<mx:ApplicationControlBar width="100%">
		<mx:Button id="btnManageTransaction"
			label="Manage Additional Transactions"
			enabled="false"
			click="{onMergeAdditionalTransactions()}"/>
		<mx:Button id="btnCopy"
			label="Copy"
			enabled="{dgRoomingList.selectedItem}"
			click="{onCopy()}"/>
		<mx:Button id="btnSplitRooms"
			label="Assign rooms"
			enabled="{model.reservationModule.aRoomingList.length > 0}"
			click="{onSplitRooms()}"/>	
					
		<mx:Spacer width="100%"/>
		
		<mx:Button id="btnApply"
			label="{model.locale.Global_Button_Apply}"
			click="{onApply()}"/>	
		<mx:Button id="btnClose"
			label="{model.locale.Global_Button_Close}"
			click="{onClose()}"/>		
	</mx:ApplicationControlBar>
</BasePopupView>
