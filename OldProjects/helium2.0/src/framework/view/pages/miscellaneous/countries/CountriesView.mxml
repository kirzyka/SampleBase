<?xml version="1.0" encoding="utf-8"?>
<VSubWindow xmlns="framework.core.view.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" xmlns:searchBox="h2olib.control.searchBox.*">
		<mx:Script>
		<![CDATA[
			import framework.view.pages.miscellaneous.countries.subview.EditCountryPopupView;
			import framework.view.pages.miscellaneous.countries.subview.EditRegionPopupView;
			import framework.view.pages.miscellaneous.countries.subview.AddCRPopupView;
			import framework.model.AppModelLocator;
			import framework.module.CommonModule;
			import services.events.miscellaneous.countries.GetCountryEvent;
			import services.events.miscellaneous.countries.GetRegionEvent;
			import services.events.miscellaneous.countries.DeleteRegionEvent;
			import services.events.miscellaneous.countries.DeleteCountryEvent;
			import framework.view.components.popups.events.PopupEvent;
			import framework.view.components.popups.DeletePopupView;
			import mx.managers.PopUpManagerChildList;
			import h2olib.control.Confirmation;
			import mx.events.CloseEvent;
			import services.vo.common.RegionVO;
			import services.vo.common.CountryVO;
			import services.vo.GlobalSettings;
			import mx.controls.Alert;
			import mx.controls.CheckBox;
			import services.vo.GlobalStorage;

			import mx.events.CollectionEvent;
			import services.vo.GlobalFunctions;
			import mx.collections.ArrayCollection;
			import services.vo.backend.RoomSettingObjectVO;
			import framework.managers.PopUpManagerExt;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import services.controller.AppController;
			
			override public function update():void
			{
				var countryEvt:GetCountryEvent = new GetCountryEvent(AppController.GET_COUNTRY_EVENT);
				CairngormEventDispatcher.getInstance().dispatchEvent(countryEvt);
			}
			
			private function handleAdd():void
			{
				var pop:AddCRPopupView = PopUpManagerExt.createPopUp(this, AddCRPopupView) as AddCRPopupView;
				pop.currentCountry = countryList.selectedIndex;
				PopUpManagerExt.centerPopUp(pop);
			}
			
			private function handleEditCR():void
			{
				if (regionList.selectedIndex > -1)
					{
						var pop:EditRegionPopupView = PopUpManagerExt.createPopUp(this, EditRegionPopupView) as EditRegionPopupView;
						pop.data = regionList.selectedItem as RegionVO;
						PopUpManagerExt.centerPopUp(pop);						
					}
				else
					if (countryList.selectedIndex > -1)
						{
							var pop2:EditCountryPopupView = PopUpManagerExt.createPopUp(this, EditCountryPopupView) as EditCountryPopupView;
							pop2.data = countryList.selectedItem as CountryVO;
							PopUpManagerExt.centerPopUp(pop2);							
						}
			}
			
			private function handleDeleteCR():void
			{
							
				if (regionList.selectedIndex > -1)
				{
					var pop:DeletePopupView = PopUpManagerExt.createPopUp(this, DeletePopupView)as DeletePopupView;
					pop.title = "Delete Region";
					pop.description = "Are you sure to delete region " + (regionList.selectedItem as RegionVO).sRegionName + "?";
					pop.addEventListener(PopupEvent.DELETE_HANDLER, delRegion);
				}
				else
					if (countryList.selectedIndex > -1)
					{
						pop = PopUpManagerExt.createPopUp(this, DeletePopupView) as DeletePopupView;
						pop.title = "Delete Country";
						pop.description =  "Are you sure to delete country " + (countryList.selectedItem as CountryVO).sCountryName + "?";
						pop.subDescription = "All the regions of this country will be deleted";
						pop.addEventListener(PopupEvent.DELETE_HANDLER, delCountry);
					}	
			}
			
			private function delCountry(e:PopupEvent):void
			{
				(e.target as DeletePopupView).removeEventListener(PopupEvent.DELETE_HANDLER, delCountry);
					var evt:DeleteCountryEvent = new DeleteCountryEvent(AppController.DELETE_COUNTRY_EVENT);
					evt.index = countryList.selectedIndex;
					evt.country = countryList.selectedItem as CountryVO;
					evt.listCountry = countryList.dataProvider as ArrayCollection;
					CairngormEventDispatcher.getInstance().dispatchEvent( evt );
					(e.target as DeletePopupView).completeCall();

			}
			
			private function delRegion(e:PopupEvent):void
			{
				(e.target as DeletePopupView).removeEventListener(PopupEvent.DELETE_HANDLER, delRegion);
					var evt:DeleteRegionEvent = new DeleteRegionEvent(AppController.DELETE_REGION_EVENT);
					evt.region = regionList.selectedItem as RegionVO;
					CairngormEventDispatcher.getInstance().dispatchEvent( evt ); 
					(e.target as DeletePopupView).completeCall();

			}
			
			private function handleSearch():void
			{
				var tempArrayRegions:ArrayCollection = new ArrayCollection();
				var i:int=0;
				var j:int=0;
				var k:int=0;
				if(search.text == "")
				{
					countryList.dataProvider = model.commonModule.countries;
					return;
				}
				countryList.dataProvider = GlobalFunctions.search(model.commonModule.countries, search.text, [["sCountryName"], ["sCountryCode"]]);
				
				tempArrayRegions = 	GlobalFunctions.search(model.commonModule.regions, search.text, [["sRegionName"], ["sRegionCode"]]);	
				
				for (j = 0; j < tempArrayRegions.length; j++)
				{
					for (i = 0; i < countryList.dataProvider.length; i++)
					{
						if ((tempArrayRegions.getItemAt(j) as RegionVO).lCountryId == (countryList.dataProvider.getItemAt(i) as CountryVO).lId)
						break;
					}
					if (i == countryList.dataProvider.length)
					{
						for (k = 0; k < model.commonModule.countries.length; k++)
						{
						if (model.commonModule.countries[k].lId == (tempArrayRegions.getItemAt(j) as RegionVO).lCountryId)
							countryList.dataProvider.addItem(model.commonModule.countries.getItemAt(k));
						}
					}
					regionList.dataProvider.removeAll();
				}
			}
			
			private function handleSearchChange():void
			{
				var char:String = search.text.charAt(search.text.length-1);
				
				if(char == "^" || char == "[" || char == "]" || char == "\\")
				{
					if(search.text.length == 0) search.text = ''; 
					else search.text = search.text.substr(0,search.text.length-1);
				}
				handleSearch();
			}
			
			// ------------------------------------------------------------------------------ //
			/**
			 *  The handle of change country by ComboBox. 
			 *  <p>Check possible to get regions from cashe and show now
			 *  without remote call from server for it.
			 *  
			 *  @see services.vo.AddressStorage#getRegions
			 *  @see services.events.GetRegionEvent
			 */
			private function handleCountryChange():void
			{
				/// get id of the country for which get his regions.
				var countryId:Number = (countryList.selectedItem as CountryVO).lId;
				/// check regions in the cashe by id of the country.
				model.commonModule.regions = CommonModule.getRegions(countryId);
				/// if cashe is empty - remote call to server for get region
				/// for this country. In otherwice - get regions from cashe.
				if (model.commonModule.regions.length == 0)
				{
					var evt:GetRegionEvent = new GetRegionEvent(AppController.GET_REGION_EVENT);
					evt.countryId = countryId;
					CairngormEventDispatcher.getInstance().dispatchEvent(evt);
				}				
			}
			
			
		]]>
	</mx:Script>
	<mx:HBox>
		<mx:FormItem direction="horizontal">
			<searchBox:SearchBox id="search" width="180" label="Country or Region" changeByFocus="handleSearchChange()" enter="handleSearchChange()"/>
			<!--<mx:Button label="Search" click="handleSearch()" id="searchCountry"/>-->
		</mx:FormItem>		
	</mx:HBox>
	<mx:HBox width="100%" height="100%">
		<mx:VBox width="100%" height="100%" borderStyle="solid">
			<mx:Label text="Country" fontSize="14" fontWeight="bold" width="100%" textAlign="center"/>			
			<mx:List id="countryList" labelField="sCountryName" width="100%" height="100%" 
				itemClick="handleCountryChange()" 
				dataProvider="{model.commonModule.countries}"
				 />
		</mx:VBox>
		
		<mx:VBox width="100%" height="100%" borderStyle="solid">
			<mx:Label text="Region" fontSize="14" fontWeight="bold" width="100%" textAlign="center"/>
			<mx:List id="regionList" width="100%" height="100%"  labelField="sRegionName"
				dataProvider="{model.commonModule.regions}" enabled="{model.commonModule.regions.length != 0}"
				/>	
		</mx:VBox>
	</mx:HBox>
	<mx:HBox width="50%" height="40">
		<mx:Button label="Add" width="{GlobalSettings.BUTTON_WIDTH}" click="handleAdd()"  id="addCountry"/>
		<mx:Button label="Edit" width="{GlobalSettings.BUTTON_WIDTH}" click="handleEditCR()" enabled="{countryList.selectedIndex > -1 || regionList.selectedIndex > -1}" id="editCountry"/>
		<mx:Button label="Delete" width="{GlobalSettings.BUTTON_WIDTH}" click="handleDeleteCR()" enabled="{countryList.selectedIndex > -1 || regionList.selectedIndex > -1}" id="deleteCountry"/>
	</mx:HBox>
</VSubWindow>
